Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Auton/AutonDriving.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided that\n * the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or\n * other materials provided with the distribution.\n *\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage org.firstinspires.ftc.teamcode.Auton;\n\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.util.ElapsedTime;\n\nimport org.firstinspires.ftc.teamcode.Hardware.Hardware;\n\n@Autonomous(name=\"Robot: Auto Drive By Encoder\", group=\"Robot\")\n\npublic class AutonDriving extends LinearOpMode {\n    // Initialize Hardware\n    Hardware robot = new Hardware(this);\n    static final double     COUNTS_PER_MOTOR_REV    = 1440 ;\n    static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;     // Gearing up (more speed, less torque) --> ratio < 1.0\n    static final double     WHEEL_DIAMETER_INCHES   = 4.0 ;\n    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /\n                                                      (WHEEL_DIAMETER_INCHES * 3.1415);\n    static final double     DRIVE_SPEED             = 0.6;\n    static final double     TURN_SPEED              = 0.5;\n\n    @Override\n    public void runOpMode() {\n        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n        rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n\n        leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n        rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n\n        // Send telemetry message to indicate successful Encoder reset\n        telemetry.addData(\"Starting at\",  \"%7d :%7d\",\n                          leftDrive.getCurrentPosition(),\n                          rightDrive.getCurrentPosition());\n        telemetry.update();\n\n        // Wait for the game to start (driver presses PLAY)\n        waitForStart();\n\n        // Step through each leg of the path,\n        // Note: Reverse movement is obtained by setting a negative distance (not speed)\n        encoderDrive(DRIVE_SPEED,  48,  48, 5.0);  // S1: Forward 47 Inches with 5 Sec timeout\n        encoderDrive(TURN_SPEED,   12, -12, 4.0);  // S2: Turn Right 12 Inches with 4 Sec timeout\n        encoderDrive(DRIVE_SPEED, -24, -24, 4.0);  // S3: Reverse 24 Inches with 4 Sec timeout\n\n        telemetry.addData(\"Path\", \"Complete\");\n        telemetry.update();\n        sleep(1000);  // pause to display final telemetry message.\n    }\n\n    public void encoderDrive(double speed, char direction, double inches, double timeoutS) {\n        int newFrontLeftTarget;\n        int newFrontRightTarget;\n        int newBackLeftTarget;\n        int newBackRightTarget;\n\n        // Ensure that the opmode is still active\n        if (opModeIsActive()) {\n\n            // Determine new target position, and pass to motor controller\n            newLeftTarget = leftDrive.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);\n            newRightTarget = rightDrive.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);\n            leftDrive.setTargetPosition(newLeftTarget);\n            rightDrive.setTargetPosition(newRightTarget);\n\n            // Turn On RUN_TO_POSITION\n            leftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n            rightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n\n            // reset the timeout time and start motion.\n            runtime.reset();\n            leftDrive.setPower(Math.abs(speed));\n            rightDrive.setPower(Math.abs(speed));\n\n            // keep looping while we are still active, and there is time left, and both motors are running.\n            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits\n            // its target position, the motion will stop.  This is \"safer\" in the event that the robot will\n            // always end the motion as soon as possible.\n            // However, if you require that BOTH motors have finished their moves before the robot continues\n            // onto the next step, use (isBusy() || isBusy()) in the loop test.\n            while (opModeIsActive() &&\n                   (runtime.seconds() < timeoutS) &&\n                   (leftDrive.isBusy() && rightDrive.isBusy())) {\n\n                // Display it for the driver.\n                telemetry.addData(\"Running to\",  \" %7d :%7d\", newLeftTarget,  newRightTarget);\n                telemetry.addData(\"Currently at\",  \" at %7d :%7d\",\n                                            leftDrive.getCurrentPosition(), rightDrive.getCurrentPosition());\n                telemetry.update();\n            }\n\n            // Stop all motion;\n            leftDrive.setPower(0);\n            rightDrive.setPower(0);\n\n            // Turn off RUN_TO_POSITION\n            leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n            rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n\n            sleep(250);   // optional pause after each move.\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Auton/AutonDriving.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Auton/AutonDriving.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Auton/AutonDriving.java	(revision 73768c90e0490231c5e5591804842d776c854ed7)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Auton/AutonDriving.java	(date 1664731715418)
@@ -84,13 +84,18 @@
         int newBackLeftTarget;
         int newBackRightTarget;
 
+        robot.stopAndResetDriveEncoders();
+
         // Ensure that the opmode is still active
         if (opModeIsActive()) {
 
             // Determine new target position, and pass to motor controller
-            newLeftTarget = leftDrive.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
-            newRightTarget = rightDrive.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
-            leftDrive.setTargetPosition(newLeftTarget);
+            newFrontLeftTarget = robot.fLMotor.getCurrentPosition() + (int)(inches * COUNTS_PER_INCH);
+            newFrontRightTarget = robot.fRMotor.getCurrentPosition() + (int)(inches * COUNTS_PER_INCH);
+            newBackLeftTarget = robot.bLMotor.getCurrentPosition() + (int)(inches * COUNTS_PER_INCH);
+            newBackRightTarget = robot.bLMotor.getCurrentPosition() + (int)(inches * COUNTS_PER_INCH);
+
+            leftDrive.setTargetPosition(newBackLeftTarget);
             rightDrive.setTargetPosition(newRightTarget);
 
             // Turn On RUN_TO_POSITION
